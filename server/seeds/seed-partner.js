const mongoose = require('mongoose');
require('dotenv').config();

const BusinessPartner = require('../src/models/BussinessPartner');
const Account = require('../src/models/Account');
const Service = require('../src/models/Service');

const seed = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/your_db_name');

    const accounts = await Account.find();
    const services = await Service.find();

    console.log(`üîç ƒê√£ t√¨m th·∫•y ${accounts.length} accounts v√† ${services.length} services.`);

    if (accounts.length < 2 || services.length < 2) {
      console.log('‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 account v√† 2 service ƒë·ªÉ seed d·ªØ li·ªáu m·∫´u.');
      process.exit(1);
    }

    const samplePartners = [
      {
        account_id: accounts[0]._id,
        services_type_id: services[0]._id,
        company_name: 'C√¥ng ty TNHH ABC',
        country: 'Vi·ªát Nam',
        states: 'H·ªì Ch√≠ Minh',
        address: '123 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1',
        logo_url: 'https://via.placeholder.com/80x40?text=ABC',
        rating: 4.5,
        review_count: 1200,
        phone: '0909123456',
        email: 'abc@example.com',
        airport_pickup: true
      },
      {
        account_id: accounts[1]._id,
        services_type_id: services[1]._id,
        company_name: 'C√¥ng ty CP XYZ',
        country: 'Vi·ªát Nam',
        states: 'H√† N·ªôi',
        address: '456 ƒê∆∞·ªùng Tr·∫ßn H∆∞ng ƒê·∫°o, Ho√†n Ki·∫øm',
        logo_url: 'https://via.placeholder.com/80x40?text=XYZ',
        rating: 4.2,
        review_count: 950,
        phone: '0911123456',
        email: 'xyz@example.com',
        airport_pickup: false
      }
    ];

    await BusinessPartner.deleteMany({});
    const inserted = await BusinessPartner.insertMany(samplePartners);
    console.log(`‚úÖ ƒê√£ th√™m ${inserted.length} business partners.`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu:', error);
    process.exit(1);
  }
};

seed();
