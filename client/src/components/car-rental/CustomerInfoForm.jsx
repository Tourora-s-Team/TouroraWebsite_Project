import React, { useState, useEffect } from 'react';
import DateInput from './DateInput';
import styles from './CustomerInfoForm.module.css';

const CustomerInfoForm = ({ customerInfo, onCustomerInfoChange, onExtrasChange, selectedExtras = [] }) => {  const [formData, setFormData] = useState({
    fullname: '',
    email: '',
    numberPhone: '',
    dateOfBirth: '',
    nationality: 'Vietnam',
    driverLicense: '',
    licenseIssueDate: '',
    licenseExpiryDate: '',
    emergencyContact: '',
    emergencyPhone: '',
    specialRequests: ''
  });
  // Update form data when customerInfo changes (from auto-fill)
  useEffect(() => {
    console.log('CustomerInfoForm - customerInfo changed:', customerInfo);
    
    if (customerInfo && Object.keys(customerInfo).length > 0) {      const newFormData = {
        fullname: customerInfo.fullname || '',
        email: customerInfo.email || '',
        numberPhone: customerInfo.numberPhone || '',
        dateOfBirth: customerInfo.dateOfBirth || '',
        nationality: customerInfo.nationality || 'Vietnam',
        driverLicense: customerInfo.driverLicense || '',
        licenseIssueDate: customerInfo.licenseIssueDate || '',
        licenseExpiryDate: customerInfo.licenseExpiryDate || '',
        emergencyContact: customerInfo.emergencyContact || '',
        emergencyPhone: customerInfo.emergencyPhone || '',
        specialRequests: customerInfo.specialRequests || ''
      };
      
      console.log('Setting formData to:', newFormData);
      setFormData(newFormData);
    }
  }, [customerInfo]);

  const [availableExtras] = useState([
    {
      id: 'insurance_plus',
      name: 'B·∫£o hi·ªÉm m·ªü r·ªông',
      description: 'B·∫£o hi·ªÉm to√†n di·ªán cho xe v√† ng∆∞·ªùi',
      price: 200000,
      type: 'insurance',
      popular: true
    },
    {
      id: 'gps',
      name: 'Thi·∫øt b·ªã GPS',
      description: 'ƒê·ªãnh v·ªã v√† d·∫´n ƒë∆∞·ªùng ti·∫øng Vi·ªát',
      price: 50000,
      type: 'equipment'
    },
    {
      id: 'child_seat',
      name: 'Gh·∫ø tr·∫ª em',
      description: 'Gh·∫ø an to√†n cho tr·∫ª t·ª´ 2-7 tu·ªïi',
      price: 100000,
      type: 'equipment'
    },
    {
      id: 'additional_driver',
      name: 'T√†i x·∫ø ph·ª•',
      description: 'Th√™m m·ªôt t√†i x·∫ø ƒë∆∞·ª£c ph√©p l√°i xe',
      price: 150000,
      type: 'service'
    },
    {
      id: 'wifi_hotspot',
      name: 'WiFi di ƒë·ªông',
      description: 'Thi·∫øt b·ªã ph√°t WiFi 4G trong xe',
      price: 80000,
      type: 'equipment'
    },
    {
      id: 'full_tank',
      name: 'ƒê·ªï ƒë·∫ßy b√¨nh xƒÉng',
      description: 'Nh·∫≠n xe v·ªõi b√¨nh xƒÉng ƒë·∫ßy',
      price: 300000,
      type: 'fuel'
    }
  ]);

  const handleInputChange = (field, value) => {
    const newFormData = { ...formData, [field]: value };
    setFormData(newFormData);
    onCustomerInfoChange(newFormData);
  };

  const handleExtraToggle = (extra) => {
    const isSelected = selectedExtras.some(item => item.id === extra.id);
    let newExtras;
    
    if (isSelected) {
      newExtras = selectedExtras.filter(item => item.id !== extra.id);
    } else {
      newExtras = [...selectedExtras, extra];
    }
    
    onExtrasChange(newExtras);
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('vi-VN').format(price);
  };

  const getExtraIcon = (type) => {
    switch (type) {
      case 'insurance': return 'üõ°Ô∏è';
      case 'equipment': return 'üì±';
      case 'service': return 'üë§';
      case 'fuel': return '‚õΩ';
      default: return '‚ú®';
    }
  };  const hasAutoFilledData = () => {
    return customerInfo && Object.keys(customerInfo).length > 0 && 
           (customerInfo.fullname || customerInfo.email || customerInfo.numberPhone);
  };

  return (
    <div className={styles.customerFormContainer}>
      <div className={styles.formHeader}>
        <h3>Th√¥ng tin kh√°ch h√†ng</h3>
        <p>Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t xe</p>
        {hasAutoFilledData() && (
          <div className={styles.autoFillNotice}>
            <span className={styles.autoFillIcon}>‚úÖ</span>
            Th√¥ng tin ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t n·∫øu c·∫ßn.
          </div>
        )}
      </div>

      <form className={styles.customerForm}>
        {/* Personal Information */}
        <div className={styles.formSection}>
          <h4 className={styles.sectionTitle}>Th√¥ng tin c√° nh√¢n</h4>
          
          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>
                H·ªç v√† t√™n <span className={styles.required}>*</span>
              </label>              <input
                type="text"
                className={styles.input}
                value={formData.fullname}
                onChange={(e) => handleInputChange('fullname', e.target.value)}
                placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                required
              />
            </div>
          </div>

          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>
                Email <span className={styles.required}>*</span>
              </label>
              <input
                type="email"
                className={styles.input}
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="email@example.com"
                required
              />
            </div>
            
            <div className={styles.formGroup}>
              <label className={styles.label}>
                S·ªë ƒëi·ªán tho·∫°i <span className={styles.required}>*</span>
              </label>              <input
                type="tel"
                className={styles.input}
                value={formData.numberPhone}
                onChange={(e) => handleInputChange('numberPhone', e.target.value)}
                placeholder="0987654321"
                required
              />
            </div>
          </div>          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>Ng√†y sinh</label>
              <DateInput
                value={formData.dateOfBirth}
                onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
                placeholder="dd/mm/yyyy"
                className={styles.input}
                isAutoFilled={hasAutoFilledData() && formData.dateOfBirth}
              />
            </div>
            
            <div className={styles.formGroup}>
              <label className={styles.label}>Qu·ªëc t·ªãch</label>
              <select
                className={styles.input}
                value={formData.nationality}
                onChange={(e) => handleInputChange('nationality', e.target.value)}
              >
                <option value="Vietnam">Vi·ªát Nam</option>
                <option value="USA">Hoa K·ª≥</option>
                <option value="UK">V∆∞∆°ng qu·ªëc Anh</option>
                <option value="Japan">Nh·∫≠t B·∫£n</option>
                <option value="Korea">H√†n Qu·ªëc</option>
                <option value="Other">Kh√°c</option>
              </select>
            </div>
          </div>
        </div>

        {/* Driver License Information */}
        <div className={styles.formSection}>
          <h4 className={styles.sectionTitle}>Th√¥ng tin b·∫±ng l√°i xe</h4>
          
          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>
                S·ªë b·∫±ng l√°i <span className={styles.required}>*</span>
              </label>
              <input
                type="text"
                className={styles.input}
                value={formData.driverLicense}
                onChange={(e) => handleInputChange('driverLicense', e.target.value)}
                placeholder="Nh·∫≠p s·ªë b·∫±ng l√°i xe"
                required
              />
            </div>
          </div>          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>Ng√†y c·∫•p</label>
              <DateInput
                value={formData.licenseIssueDate}
                onChange={(e) => handleInputChange('licenseIssueDate', e.target.value)}
                placeholder="dd/mm/yyyy"
                className={styles.input}
                isAutoFilled={hasAutoFilledData() && formData.licenseIssueDate}
              />
            </div>
            
            <div className={styles.formGroup}>
              <label className={styles.label}>Ng√†y h·∫øt h·∫°n</label>
              <DateInput
                value={formData.licenseExpiryDate}
                onChange={(e) => handleInputChange('licenseExpiryDate', e.target.value)}
                placeholder="dd/mm/yyyy"
                className={styles.input}
                isAutoFilled={hasAutoFilledData() && formData.licenseExpiryDate}
              />
            </div>
          </div>
        </div>

        {/* Emergency Contact */}
        <div className={styles.formSection}>
          <h4 className={styles.sectionTitle}>Li√™n h·ªá kh·∫©n c·∫•p</h4>
          
          <div className={styles.formRow}>
            <div className={styles.formGroup}>
              <label className={styles.label}>T√™n ng∆∞·ªùi li√™n h·ªá</label>
              <input
                type="text"
                className={styles.input}
                value={formData.emergencyContact}
                onChange={(e) => handleInputChange('emergencyContact', e.target.value)}
                placeholder="T√™n ng∆∞·ªùi th√¢n"
              />
            </div>
            
            <div className={styles.formGroup}>
              <label className={styles.label}>S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="tel"
                className={styles.input}
                value={formData.emergencyPhone}
                onChange={(e) => handleInputChange('emergencyPhone', e.target.value)}
                placeholder="0987654321"
              />
            </div>
          </div>
        </div>

        {/* Special Requests */}
        <div className={styles.formSection}>
          <h4 className={styles.sectionTitle}>Y√™u c·∫ßu ƒë·∫∑c bi·ªát</h4>
          
          <div className={styles.formGroup}>
            <label className={styles.label}>Ghi ch√∫ (t√πy ch·ªçn)</label>
            <textarea
              className={styles.textarea}
              value={formData.specialRequests}
              onChange={(e) => handleInputChange('specialRequests', e.target.value)}
              placeholder="Nh·∫≠p y√™u c·∫ßu ƒë·∫∑c bi·ªát ho·∫∑c ghi ch√∫..."
              rows="3"
            />
          </div>
        </div>
      </form>

      {/* Additional Services */}
      <div className={styles.extrasSection}>
        <div className={styles.extrasHeader}>
          <h3>D·ªãch v·ª• b·ªï sung</h3>
          <p>Th√™m c√°c d·ªãch v·ª• ƒë·ªÉ chuy·∫øn ƒëi ho√†n h·∫£o h∆°n</p>
        </div>

        <div className={styles.extrasList}>
          {availableExtras.map(extra => (
            <div 
              key={extra.id}
              className={`${styles.extraItem} ${
                selectedExtras.some(item => item.id === extra.id) ? styles.selected : ''
              }`}
              onClick={() => handleExtraToggle(extra)}
            >
              <div className={styles.extraInfo}>
                <div className={styles.extraMain}>
                  <span className={styles.extraIcon}>{getExtraIcon(extra.type)}</span>
                  <div className={styles.extraDetails}>
                    <h5 className={styles.extraName}>
                      {extra.name}
                      {extra.popular && (
                        <span className={styles.popularBadge}>Ph·ªï bi·∫øn</span>
                      )}
                    </h5>
                    <p className={styles.extraDescription}>{extra.description}</p>
                  </div>
                </div>
                
                <div className={styles.extraPrice}>
                  +{formatPrice(extra.price)}ƒë
                  <div className={styles.priceUnit}>/ng√†y</div>
                </div>
              </div>
              
              <div className={styles.extraCheckbox}>
                <input
                  type="checkbox"
                  checked={selectedExtras.some(item => item.id === extra.id)}
                  onChange={() => handleExtraToggle(extra)}
                />
                <span className={styles.checkmark}></span>
              </div>
            </div>
          ))}
        </div>

        {selectedExtras.length > 0 && (
          <div className={styles.selectedExtras}>
            <h4>D·ªãch v·ª• ƒë√£ ch·ªçn:</h4>
            <div className={styles.selectedList}>
              {selectedExtras.map(extra => (
                <span key={extra.id} className={styles.selectedExtra}>
                  {extra.name} (+{formatPrice(extra.price)}ƒë)
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CustomerInfoForm;
